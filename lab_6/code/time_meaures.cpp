#include "time_meaures.h"

#define TIME_REPEATS 20
#define NANO 1e9

void time_measures() {
    vector<vector<vector<double>>> gs = {{{0, 70},
                                                 {70, 0}},
                                         {{0, 39, 70},
                                                 {39, 0, 52},
                                                 {70, 52, 0}},
                                         {{0, 78, 96, 67},
                                                 {78, 0, 23, 49},
                                                 {96, 23, 0, 46},
                                                 {67, 49, 46, 0}},
                                         {{0, 42, 90, 64, 48},
                                                 {42, 0, 43, 86, 76},
                                                 {90, 43, 0, 22, 69},
                                                 {64, 86, 22, 0, 3},
                                                 {48, 76, 69, 3,  0}},
                                         {{0, 79, 36, 88, 21, 95},
                                                 {79, 0, 61, 17, 55, 13},
                                                 {36, 61, 0, 85, 12, 96},
                                                 {88, 17, 85, 0, 96, 26},
                                                 {21, 55, 12, 96, 0, 21},
                                                 {95, 13, 96, 26, 21, 0}},
                                         {{0, 74, 31, 15, 8,  53, 9},
                                                 {74, 0, 83, 38, 6,  52, 89},
                                                 {31, 83, 0, 86, 49, 21, 57},
                                                 {15, 38, 86, 0, 34, 36, 14},
                                                 {8,  6,  49, 34, 0, 68, 88},
                                                 {53, 52, 21, 36, 68, 0, 22},
                                                 {9,  89, 57, 14, 88, 22, 0}},
                                         {{0, 84, 85, 22, 38, 24, 44, 64},
                                                 {84, 0, 69, 17, 30, 28, 12, 60},
                                                 {85, 69, 0, 89, 50, 73, 51, 60},
                                                 {22, 17, 89, 0, 57, 95, 8,  79},
                                                 {38, 30, 50, 57, 0, 46, 47, 45},
                                                 {24, 28, 73, 95, 46, 0, 54, 87},
                                                 {44, 12, 51, 8,  47, 54, 0, 50},
                                                 {64, 60, 60, 79, 45, 87, 50, 0}},
                                         {{0, 99, 96, 63, 43, 38, 81, 70, 92},
                                                 {99, 0, 22, 8,  17, 50, 12, 86, 27},
                                                 {96, 22, 0, 70, 43, 38, 89, 32, 85},
                                                 {63, 8,  70, 0, 6,  81, 68, 76, 48},
                                                 {43, 17, 43, 6,  0, 93, 54, 93, 59},
                                                 {38, 50, 38, 81, 93, 0, 77, 26, 78},
                                                 {81, 12, 89, 68, 54, 77, 0, 9,  100},
                                                 {70, 86, 32, 76, 93, 26, 9,  0, 15},
                                                 {92, 27, 85, 48, 59, 78, 100, 15, 0}},
                                         {{0, 91, 60, 44, 33, 51, 97, 6,  54, 40},
                                                 {91, 0, 73, 36, 43, 66, 6,  85, 37, 56},
                                                 {60, 73, 0, 67, 8,  16, 86, 5,  46, 76},
                                                 {44, 36, 67, 0, 95, 8,  52, 74, 68, 31},
                                                 {33, 43, 8,  95, 0, 56, 67, 62, 56, 32},
                                                 {51, 66, 16, 8,  56, 0, 72, 27, 22, 79},
                                                 {97, 6,  86, 52, 67, 72, 0, 23, 52, 89},
                                                 {6,  85, 5,  74, 62, 27, 23, 0, 66, 3},
                                                 {54, 37, 46, 68, 56, 22, 52,  66, 0, 84},
                                                 {40, 56, 76, 31, 32, 79, 89, 3,  84, 0}},
                                         {{0, 45, 28, 42, 42, 93, 48, 12, 79, 33, 22},
                                                 {45, 0, 63, 61, 69, 84, 8,  68, 20, 99, 74},
                                                 {28, 63, 0, 45, 6,  99, 2,  25, 80, 20, 72},
                                                 {42, 61, 45, 0, 76, 29, 36, 3,  3,  33, 34},
                                                 {42, 69, 6,  76, 0, 1,  76, 17, 56, 48, 25},
                                                 {93, 84, 99, 29, 1,  0, 47, 6,  81, 40, 70},
                                                 {48, 8,  2,  36, 76, 47, 0, 44, 45, 97, 66},
                                                 {12, 68, 25, 3,  17, 6,  44, 0, 83, 26, 24},
                                                 {79, 20, 80, 3,  56, 81, 45,  83, 0, 16, 35},
                                                 {33, 99, 20, 33, 48, 40, 97, 26, 16, 0, 88},
                                                 {22, 74, 72, 34, 25, 70, 66, 24, 35, 88, 0}}};
    vector<double> brut_force_time(gs.size()), ants_time(gs.size());
    timespec start, end;
    for (int i = 0; i < gs.size(); ++i) {
        cout << gs[i].size() << '\n';
        clock_gettime(CLOCK_MONOTONIC, &start);
        for (int j = 0; j < TIME_REPEATS; ++j)
            complete_bust(gs[i]);
        clock_gettime(CLOCK_MONOTONIC, &end);
        brut_force_time[i] = ((end.tv_sec - start.tv_sec) * NANO + end.tv_nsec - start.tv_nsec) / NANO;
        cout << "BF time " << brut_force_time[i] << '\n';
        clock_gettime(CLOCK_MONOTONIC, &start);
        for (int j = 0; j < TIME_REPEATS; ++j)
            ant_algorithm(gs[i]);
        clock_gettime(CLOCK_MONOTONIC, &end);
        ants_time[i] = ((end.tv_sec - start.tv_sec) * NANO + end.tv_nsec - start.tv_nsec) / NANO;
        cout << "ANT time " << ants_time[i] << '\n';
    }
    ofstream out;
    out.open("times.json", ios_base::out);
    out << "{\n\"brut_force\": {\n";
    for (int i = 0; i < gs.size(); ++i) {
        out << '"' << gs[i].size() << '"' << ": " << brut_force_time[i];
        if (i != gs.size() - 1)
            out << ",";
        out << '\n';
    }
    out << "},\n\"ants\": {\n";
    for (int i = 0; i < gs.size(); ++i) {
        out << '"' << gs[i].size() << '"' << ": " << ants_time[i];
        if (i != gs.size() - 1)
            out << ",";
        out << '\n';
    }
    out << "}\n}\n";
}